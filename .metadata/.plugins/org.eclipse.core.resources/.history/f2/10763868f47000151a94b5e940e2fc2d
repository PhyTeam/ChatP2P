package controller;

import java.util.List;

import org.json.JSONArray;
import org.json.JSONObject;

import model.FriendTable;
import model.User;
import model.UserTable;
import protocol.*;
import utils.TheTimer;


public class Controller implements ControllerInterface {
	
	ProtocolMethod protocolMethod;
	
	public Controller(ProtocolMethod protocolMethod) {
		this.protocolMethod = protocolMethod;
	}
	/**
	 * For sign up method
	 * @return protocol return null and error code
	 */
	@Override
	public ProtocolReturn signup()
	{
		Object[] param = protocolMethod.method_param;
		String username = (String)param[0];
		String password = (String)param[1];
		String fullName = (String)param[2];
		boolean status = false;
		int port = -1;
		String ip = "";
		User user = new User(username, password, fullName, ip, port, status);
		ProtocolError error = new ProtocolError(0, "Success");
		try {
			Cmd_addUser(user);
		} catch (DuplicateUserName e) {
			// TODO Auto-generated catch block
			error = e.getProtocolError();
		}
		ProtocolReturn ret = new ProtocolReturn(protocolMethod.method_name,
				null, protocolMethod.id, error);
		return ret;
	}
	
	/**
	 * Valid user name and password.
	 * @return Procol result 
	 */
	@Override
	public ProtocolReturn login(){
		Object[] param = protocolMethod.method_param;
		String username = (String)param[0];
		String password = (String)param[1];
		ProtocolError error = new ProtocolError(0, "Success");
		
		try {
			Cmd_validUser(username, password);
		} catch (PasswordIncorrect e) {
			error = e.getProtocolError();
		} catch (UserNotFound e) {
			error = e.getProtocolError();
		}
		
		ProtocolReturn ret = new ProtocolReturn(protocolMethod.method_name, 
				(Object[])null, protocolMethod.id, error);
		return ret;
	}
	
	/**
	 * Get user 's profile.
	 * In result, 
	 * Param 1 User name
	 * Param 2 Full name
	 * Param 3 Date of birth
	 * Param 4 Sex
	 * Param 5 Avatar
	 */
	@Override
	public ProtocolReturn getProfile() {
		Object[] param = protocolMethod.method_param;
		String username = (String)param[0];
		
		ProtocolError error = new ProtocolError(0, "Success");
		Object[] result = null;
		try {
			User user = Cmd_findUser(username);
			
			result = new Object[5];
			result[0] = user.getUserName();
			//result[1] = user.getPassword();
			result[1] = user.getFullName();
			result[2] = user.getDateOfBirth();
			result[3] = user.getSex();
			result[4] = user.getAvatar();
		} catch (UserNotFound e) {
			error = e.getProtocolError();
		}
		return new ProtocolReturn(protocolMethod.method_name, result, protocolMethod.id, error);
	}
	@Override
	public ProtocolReturn getContacts() {
		String username = (String) protocolMethod.method_param[0];
		
		ProtocolError error = new ProtocolError(0, "Success");
		Object[] result = null;
		try {
			List<User> listFriends = Cmd_getContacts(username);
			result = new Object[listFriends.size()];
			int i = 0;
			for (User user : listFriends) {
				JSONObject userObject = new JSONObject();
				userObject.put("username", user.getUserName());
				userObject.put("Fullname", user.getFullName());
				userObject.put("Ip", user.getDateOfBirth());
				userObject.put("Port", user.getSex());
				userObject.put("Status", user.isStatus());
				result[i++] = userObject;
			}
			
		} catch (UserNotFound e) {
			e.getProtocolError();
		}
		ProtocolReturn ret = new ProtocolReturn(protocolMethod.method_name, result, protocolMethod.id, error);
		return ret;
	}
	/**
	 * Update online status
	 */
	@Override
	public ProtocolReturn logout() {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public ProtocolReturn online() {
		// TODO Auto-generated method stub
		return null;
	}
	
	private List<User> Cmd_getContacts(String username) throws UserNotFound{
		// Check user naem is valid
		Cmd_findUser(username);
		FriendTable friendTable = new FriendTable();
		return friendTable.selectFriends(username);
	}
	private boolean Cmd_validUser(String un, String pw) throws UserNotFound, PasswordIncorrect{
		User u = Cmd_findUser(un);
		if(!(u.getPassword().equals(pw))) 
			throw new PasswordIncorrect();
		// Login ok
		TheTimer.timer.schedule(new TheTimer.OfflineTask(un), 60000);
		return true;
	}
	
	private User Cmd_findUser(String username) throws UserNotFound{
		UserTable userTable = new UserTable();
		User u = userTable.selectUser(username);
		if(u == null) throw new UserNotFound();
		return u;
	}
	
	private void Cmd_addUser(User user) throws DuplicateUserName{
		UserTable userTable = new UserTable();
		if(userTable.selectUser(user.getUserName()) != null)
			throw new DuplicateUserName();
		userTable.AddUser(user);
	}
	
	public abstract class ControllerException extends Exception{
		/**
		 * serial Version UID
		 */
		protected static final long serialVersionUID = 1L;
		protected ProtocolError error;
		public ProtocolError getProtocolError() {
			return error;
		}
	}
	public class DuplicateUserName extends ControllerException{
		private static final long serialVersionUID = -8110052213562314344L;
		private static final int CODE = -3;
		public DuplicateUserName() {
			ProtocolError protocolError = new ProtocolError(CODE, "Duplicate user name");
			this.error = protocolError;
		}
	}
	
	public class UserNotFound extends ControllerException{

		private static final long serialVersionUID = 1L;
		public static final int CODE = -3;
		public UserNotFound() {
			error = new ProtocolError(CODE, "User not found");
		}
	}
	
	public class PasswordIncorrect extends ControllerException{

		private static final long serialVersionUID = 1L;
		public static final int CODE = -2;
		public PasswordIncorrect() {
			error = new ProtocolError(CODE, "Password incorrect");
		}
	}
}
